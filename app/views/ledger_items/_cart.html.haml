#cart
  %h1
    %span Pending Matches
  
  %table.data
    %thead
      %tr
        %th.small
          Account
        %th.small
          Sender
        %th.small
          Recipient
        %th.small
          Date
        %th.small
          Amount
        %th.small
          Tax
        %th.small
          Description
    %tfoot
      %tr
        %td.smaller{:colspan => 7}
          = button_to("Empty", empty_cart_path).html_safe!
          - if @cart.reconciled?
            = button_to("Reconcile", save_cart_path).html_safe!
          - else
            - if @cart.size == 1
              - item = @cart.ledger_items.first
              - form_for(item, :url => balance_cart_path) do |f|
                = #f.collection_select(:account_id, Account.all.inject([['Select account', '']]), :id, :name { |r, a| r << [a.name, a.id.to_s] }, params[:account]), :class => "autocomplete")
                = collection_select(:ledger_item, :account_id, Account.all, :id, :name, { :prompt => 'Select account' }, :class => 'autocomplete')
                = f.submit 'Create match'
              = button_to("Set up rule", new_account_rule_path(item.account, :ledger_item_id => item.id), :method => :get).html_safe!

    %tbody
      - for ledger_item in @cart.ledger_items
        %tr{:class => "smaller #{cycle('odd', 'even')}"}[ledger_item, :cart]
          %td=h ledger_item.account.name
          %td=h ledger_item.sender.name
          %td=h ledger_item.recipient.name
          %td= ledger_item.transacted_on
          %td.currency= monetize(ledger_item.total_amount, ledger_item.currency_symbol)
          %td.currency= monetize(ledger_item.tax_amount, ledger_item.currency_symbol)
          %th.small=h ledger_item.description 
